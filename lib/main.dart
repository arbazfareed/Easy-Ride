// lib/main.dart

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:firebase_core/firebase_core.dart'; // Import Firebase Core
import 'firebase_options.dart'; // Import your Firebase options file (generated by FlutterFire CLI)

import 'cubits/navigation_cubit.dart';
import 'navigation/app_navigator.dart';

void main() async {
  // Ensure Flutter widgets are initialized before any Firebase operations
  WidgetsFlutterBinding.ensureInitialized();

  // Initialize Firebase
  try {
    await Firebase.initializeApp(
      options: DefaultFirebaseOptions.currentPlatform,
    );
    // You can add a print statement for debugging
    print('Firebase initialized successfully!');
  } catch (e) {
    // Crucial: Handle Firebase initialization errors gracefully.
    // For a production app, you might want to show an error screen
    // or a persistent message to the user, or log it to a crash reporting service.
    print('Error initializing Firebase: $e');
    // As a simple example, you could show an error dialog or just exit
    // SystemNavigator.pop(); // Use cautiously, immediately closes the app
  }

  // Once Firebase is initialized, run your app
  runApp(const EasyRideApp());
}

class EasyRideApp extends StatelessWidget {
  const EasyRideApp({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocProvider(
      create: (_) => NavigationCubit(), // Provide your NavigationCubit at the top level
      child: MaterialApp(
        title: 'EasyRide', // A title for your app
        debugShowCheckedModeBanner: false,
        theme: ThemeData(
          primarySwatch: Colors.green, // You can define your app's primary color
          visualDensity: VisualDensity.adaptivePlatformDensity,
          // Add other theme properties as needed
        ),
        home: const AppNavigator(), // The root of your app's navigation
      ),
    );
  }
}